---
import type { FeelbackValueDefinition } from "../../src";
import { getPreset } from "../presets";

interface Props {
  action?: "send" | "set-field";
  reveal?: string;
  field?: string;
  class?: string;
  hideZero?: boolean;
  hideZeroCount?: boolean;
  showLabel?: boolean;
  showTitle?: boolean;
  showCount?: boolean;
  active?: string | number;
  items: string | readonly FeelbackValueDefinition[];
}

const {
  action = "send",
  reveal,
  field,
  showTitle = true,
  showCount = false,
  showLabel = false,
  hideZero = false,
  hideZeroCount = true,
  active: _active,
  class: className,
  items: _items,
} = Astro.props;

const items = typeof _items === "string" ? getPreset(_items) : _items;
if (items.length < 1) {
  throw new Error("No feelback button values specified");
}

const active = typeof _active === "number" ? items[_active].value : _active;
---

<div
  data-feelback-type="button-group"
  data-reveal={reveal}
  class={`feelback-buttons${className ? " " + className : ""}${showCount ? " with-count" : ""}${
    hideZero ? " hide-zero" : ""
  }`}
>
  {
    items.map(({ value, icon, title }, buttonIdx) => (
      <button
        title={showTitle ? title : undefined}
        class={`feelback-btn${active === value ? " active" : ""}`}
        data-feelback-action={action}
        data-feelback-value={value}
      >
        {!Array.isArray(icon) ? (
          <span class="feelback-icon" set:html={icon} />
        ) : (
          <>
            <span class="feelback-icon inactive" set:html={icon[0]} />
            <span class="feelback-icon active" set:html={icon[1]} />
          </>
        )}
        {showLabel && title && <span class="label">{title}</span>}
        {showCount && (
          <span
            class={`feelback-count${hideZeroCount ? " hide-zero" : ""}`}
            data-feelback-count={value}
            data-feelback-count-index={buttonIdx}
          />
        )}
      </button>
    ))
  }

  {field && <input name={field} data-feelback-field type="hidden" value={active} />}
</div>
