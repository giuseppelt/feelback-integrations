---
import iconHappy from "@feelback/js/icons/icon-happy.svg?raw";
import iconLove from "@feelback/js/icons/icon-love.svg?raw";
import iconCry from "@feelback/js/icons/icon-cry.svg?raw";
import iconNeutral from "@feelback/js/icons/icon-neutral.svg?raw";
import iconSad from "@feelback/js/icons/icon-sad.svg?raw";
import iconHeart from "@feelback/js/icons/icon-heart.svg?raw";
import iconHeartActive from "@feelback/js/icons/icon-heart-active.svg?raw";
import iconStar from "@feelback/js/icons/icon-star.svg?raw";
import iconStarActive from "@feelback/js/icons/icon-star-active.svg?raw";
import iconLike from "@feelback/js/icons/icon-like.svg?raw";
import iconLikeActive from "@feelback/js/icons/icon-like-active.svg?raw";
import iconDislike from "@feelback/js/icons/icon-dislike.svg?raw";
import iconCheck from "@feelback/js/icons/icon-check.svg?raw";
import iconTimes from "@feelback/js/icons/icon-times.svg?raw";
import iconArrowUp from "@feelback/js/icons/icon-arrow-up.svg?raw";
import iconArrowDown from "@feelback/js/icons/icon-arrow-down.svg?raw";

const PRESETS = {
  "pulse-heart": [["+", [iconHeart, iconHeartActive], "Love"]],
  "pulse-star": [["+", [iconStar, iconStarActive], "Star"]],
  "pulse-like": [["+", [iconLike, iconLikeActive], "Like"]],
  "like-dislike": [
    ["+1", iconLike, "Like"],
    ["-1", iconDislike, "Dislike"],
  ],
  "yes-no": [
    ["+1", iconLike, "Yes"],
    ["-1", iconDislike, "No"],
  ],
  check: [
    ["y", iconCheck, "Yes"],
    ["n", iconTimes, "No"],
  ],
  arrows: [
    ["y", iconArrowUp, "Upvote"],
    ["n", iconArrowDown, "Downvote"],
  ],
  feeling: [
    ["happy", iconHappy, "Happy"],
    ["neutral", iconNeutral, "Neutral"],
    ["sad", iconSad, "Sad"],
  ],
  evaluation: [
    ["love", iconLove, "Love it"],
    ["happy", iconHappy, "It's ok"],
    ["sad", iconSad, "Not so great"],
    ["hate", iconCry, "Hate it"],
  ],
  github: [
    ["+1", "üëç", "Like"],
    ["-1", "üëé", "Dislike"],
    ["laugh", "üòÑ", "Laugh"],
    ["confused", "üòï", "Confused"],
    ["heart", "‚ù§Ô∏è", "Love"],
    ["hooray", "üéâ", "Hooray!"],
    ["rocket", "üöÄ", "Let's go!"],
    ["eyes", "üëÄ", "What?"],
  ],
  facebook: [
    ["like", "üëç", "Like"],
    ["love", "‚ù§Ô∏è", "Love"],
    ["laugh", "üòÑ", "AhAh"],
    ["wow", "üòÆ", "Wow"],
    ["sad", "üò•", "Cry"],
    ["angry", "üò°", "Angry"],
  ],
  feedback: [
    ["idea", "üí°", "Idea"],
    ["error", "üí•", "Error"],
    ["other", "üí¨", "Message"],
  ],
} satisfies Record<string, ButtonItem[]>;

export type PresetName = keyof typeof PRESETS;
export type ButtonItem = readonly [value: string, icon: string | readonly [string, string], title: string | undefined];

interface Props {
  action?: "send" | "set-field";
  field?: string;
  class?: string;
  hideZero?: boolean;
  hideZeroCount?: boolean;
  showLabel?: boolean;
  showTitle?: boolean;
  showCount?: boolean;
  active?: string | number;
  items: PresetName | readonly ButtonItem[];
}

const {
  action = "send",
  field,
  showTitle = true,
  showCount = false,
  showLabel = false,
  hideZero = false,
  hideZeroCount = true,
  active: _active,
  class: className,
  items: _items,
} = Astro.props;

const items = typeof _items === "string" ? PRESETS[_items] : _items;
if (items.length < 1) {
  throw new Error("No feelback button values specified");
}

const active = typeof _active === "number" ? items[_active][0] : _active;
---

<div
  data-feelback-type="button-group"
  class={`feelback-buttons${className ? " " + className : ""}${showCount ? " with-count" : ""}${
    hideZero ? " hide-zero" : ""
  }`}
>
  {
    items.map(([value, html, title], buttonIdx) => (
      <button
        title={showTitle ? title : undefined}
        class={`feelback-btn${active === value ? " active" : ""}`}
        data-feelback-action={action}
        data-feelback-value={value}
      >
        {!Array.isArray(html) ? (
          <span class="feelback-icon" set:html={html} />
        ) : (
          <>
            <span class="feelback-icon inactive" set:html={html[0]} />
            <span class="feelback-icon active" set:html={html[1]} />
          </>
        )}
        {showLabel && title && <span class="label">{title}</span>}
        {showCount && (
          <span
            class={`feelback-count${hideZeroCount ? " hide-zero" : ""}`}
            data-feelback-count={value}
            data-feelback-count-index={buttonIdx}
          />
        )}
      </button>
    ))
  }

  {field && <input name={field} data-feelback-field type="hidden" value={active} />}
</div>
